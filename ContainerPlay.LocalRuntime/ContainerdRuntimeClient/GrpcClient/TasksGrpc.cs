// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: tasks.proto
// </auto-generated>
// Original file comments:
//
// Copyright The containerd Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Containerd.Services.Tasks.V1 {
  public static partial class Tasks
  {
    static readonly string __ServiceName = "containerd.services.tasks.v1.Tasks";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Containerd.Services.Tasks.V1.CreateTaskRequest> __Marshaller_containerd_services_tasks_v1_CreateTaskRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Containerd.Services.Tasks.V1.CreateTaskRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Containerd.Services.Tasks.V1.CreateTaskResponse> __Marshaller_containerd_services_tasks_v1_CreateTaskResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Containerd.Services.Tasks.V1.CreateTaskResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Containerd.Services.Tasks.V1.StartRequest> __Marshaller_containerd_services_tasks_v1_StartRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Containerd.Services.Tasks.V1.StartRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Containerd.Services.Tasks.V1.StartResponse> __Marshaller_containerd_services_tasks_v1_StartResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Containerd.Services.Tasks.V1.StartResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Containerd.Services.Tasks.V1.DeleteTaskRequest> __Marshaller_containerd_services_tasks_v1_DeleteTaskRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Containerd.Services.Tasks.V1.DeleteTaskRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Containerd.Services.Tasks.V1.DeleteResponse> __Marshaller_containerd_services_tasks_v1_DeleteResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Containerd.Services.Tasks.V1.DeleteResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Containerd.Services.Tasks.V1.DeleteProcessRequest> __Marshaller_containerd_services_tasks_v1_DeleteProcessRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Containerd.Services.Tasks.V1.DeleteProcessRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Containerd.Services.Tasks.V1.GetRequest> __Marshaller_containerd_services_tasks_v1_GetRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Containerd.Services.Tasks.V1.GetRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Containerd.Services.Tasks.V1.GetResponse> __Marshaller_containerd_services_tasks_v1_GetResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Containerd.Services.Tasks.V1.GetResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Containerd.Services.Tasks.V1.ListTasksRequest> __Marshaller_containerd_services_tasks_v1_ListTasksRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Containerd.Services.Tasks.V1.ListTasksRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Containerd.Services.Tasks.V1.ListTasksResponse> __Marshaller_containerd_services_tasks_v1_ListTasksResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Containerd.Services.Tasks.V1.ListTasksResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Containerd.Services.Tasks.V1.KillRequest> __Marshaller_containerd_services_tasks_v1_KillRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Containerd.Services.Tasks.V1.KillRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Protobuf.WellKnownTypes.Empty.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Containerd.Services.Tasks.V1.ExecProcessRequest> __Marshaller_containerd_services_tasks_v1_ExecProcessRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Containerd.Services.Tasks.V1.ExecProcessRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Containerd.Services.Tasks.V1.ResizePtyRequest> __Marshaller_containerd_services_tasks_v1_ResizePtyRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Containerd.Services.Tasks.V1.ResizePtyRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Containerd.Services.Tasks.V1.CloseIORequest> __Marshaller_containerd_services_tasks_v1_CloseIORequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Containerd.Services.Tasks.V1.CloseIORequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Containerd.Services.Tasks.V1.PauseTaskRequest> __Marshaller_containerd_services_tasks_v1_PauseTaskRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Containerd.Services.Tasks.V1.PauseTaskRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Containerd.Services.Tasks.V1.ResumeTaskRequest> __Marshaller_containerd_services_tasks_v1_ResumeTaskRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Containerd.Services.Tasks.V1.ResumeTaskRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Containerd.Services.Tasks.V1.ListPidsRequest> __Marshaller_containerd_services_tasks_v1_ListPidsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Containerd.Services.Tasks.V1.ListPidsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Containerd.Services.Tasks.V1.ListPidsResponse> __Marshaller_containerd_services_tasks_v1_ListPidsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Containerd.Services.Tasks.V1.ListPidsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Containerd.Services.Tasks.V1.CheckpointTaskRequest> __Marshaller_containerd_services_tasks_v1_CheckpointTaskRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Containerd.Services.Tasks.V1.CheckpointTaskRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Containerd.Services.Tasks.V1.CheckpointTaskResponse> __Marshaller_containerd_services_tasks_v1_CheckpointTaskResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Containerd.Services.Tasks.V1.CheckpointTaskResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Containerd.Services.Tasks.V1.UpdateTaskRequest> __Marshaller_containerd_services_tasks_v1_UpdateTaskRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Containerd.Services.Tasks.V1.UpdateTaskRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Containerd.Services.Tasks.V1.MetricsRequest> __Marshaller_containerd_services_tasks_v1_MetricsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Containerd.Services.Tasks.V1.MetricsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Containerd.Services.Tasks.V1.MetricsResponse> __Marshaller_containerd_services_tasks_v1_MetricsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Containerd.Services.Tasks.V1.MetricsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Containerd.Services.Tasks.V1.WaitRequest> __Marshaller_containerd_services_tasks_v1_WaitRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Containerd.Services.Tasks.V1.WaitRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Containerd.Services.Tasks.V1.WaitResponse> __Marshaller_containerd_services_tasks_v1_WaitResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Containerd.Services.Tasks.V1.WaitResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Containerd.Services.Tasks.V1.CreateTaskRequest, global::Containerd.Services.Tasks.V1.CreateTaskResponse> __Method_Create = new grpc::Method<global::Containerd.Services.Tasks.V1.CreateTaskRequest, global::Containerd.Services.Tasks.V1.CreateTaskResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Create",
        __Marshaller_containerd_services_tasks_v1_CreateTaskRequest,
        __Marshaller_containerd_services_tasks_v1_CreateTaskResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Containerd.Services.Tasks.V1.StartRequest, global::Containerd.Services.Tasks.V1.StartResponse> __Method_Start = new grpc::Method<global::Containerd.Services.Tasks.V1.StartRequest, global::Containerd.Services.Tasks.V1.StartResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Start",
        __Marshaller_containerd_services_tasks_v1_StartRequest,
        __Marshaller_containerd_services_tasks_v1_StartResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Containerd.Services.Tasks.V1.DeleteTaskRequest, global::Containerd.Services.Tasks.V1.DeleteResponse> __Method_Delete = new grpc::Method<global::Containerd.Services.Tasks.V1.DeleteTaskRequest, global::Containerd.Services.Tasks.V1.DeleteResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Delete",
        __Marshaller_containerd_services_tasks_v1_DeleteTaskRequest,
        __Marshaller_containerd_services_tasks_v1_DeleteResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Containerd.Services.Tasks.V1.DeleteProcessRequest, global::Containerd.Services.Tasks.V1.DeleteResponse> __Method_DeleteProcess = new grpc::Method<global::Containerd.Services.Tasks.V1.DeleteProcessRequest, global::Containerd.Services.Tasks.V1.DeleteResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteProcess",
        __Marshaller_containerd_services_tasks_v1_DeleteProcessRequest,
        __Marshaller_containerd_services_tasks_v1_DeleteResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Containerd.Services.Tasks.V1.GetRequest, global::Containerd.Services.Tasks.V1.GetResponse> __Method_Get = new grpc::Method<global::Containerd.Services.Tasks.V1.GetRequest, global::Containerd.Services.Tasks.V1.GetResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Get",
        __Marshaller_containerd_services_tasks_v1_GetRequest,
        __Marshaller_containerd_services_tasks_v1_GetResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Containerd.Services.Tasks.V1.ListTasksRequest, global::Containerd.Services.Tasks.V1.ListTasksResponse> __Method_List = new grpc::Method<global::Containerd.Services.Tasks.V1.ListTasksRequest, global::Containerd.Services.Tasks.V1.ListTasksResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "List",
        __Marshaller_containerd_services_tasks_v1_ListTasksRequest,
        __Marshaller_containerd_services_tasks_v1_ListTasksResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Containerd.Services.Tasks.V1.KillRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_Kill = new grpc::Method<global::Containerd.Services.Tasks.V1.KillRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Kill",
        __Marshaller_containerd_services_tasks_v1_KillRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Containerd.Services.Tasks.V1.ExecProcessRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_Exec = new grpc::Method<global::Containerd.Services.Tasks.V1.ExecProcessRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Exec",
        __Marshaller_containerd_services_tasks_v1_ExecProcessRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Containerd.Services.Tasks.V1.ResizePtyRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_ResizePty = new grpc::Method<global::Containerd.Services.Tasks.V1.ResizePtyRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ResizePty",
        __Marshaller_containerd_services_tasks_v1_ResizePtyRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Containerd.Services.Tasks.V1.CloseIORequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_CloseIO = new grpc::Method<global::Containerd.Services.Tasks.V1.CloseIORequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CloseIO",
        __Marshaller_containerd_services_tasks_v1_CloseIORequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Containerd.Services.Tasks.V1.PauseTaskRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_Pause = new grpc::Method<global::Containerd.Services.Tasks.V1.PauseTaskRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Pause",
        __Marshaller_containerd_services_tasks_v1_PauseTaskRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Containerd.Services.Tasks.V1.ResumeTaskRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_Resume = new grpc::Method<global::Containerd.Services.Tasks.V1.ResumeTaskRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Resume",
        __Marshaller_containerd_services_tasks_v1_ResumeTaskRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Containerd.Services.Tasks.V1.ListPidsRequest, global::Containerd.Services.Tasks.V1.ListPidsResponse> __Method_ListPids = new grpc::Method<global::Containerd.Services.Tasks.V1.ListPidsRequest, global::Containerd.Services.Tasks.V1.ListPidsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ListPids",
        __Marshaller_containerd_services_tasks_v1_ListPidsRequest,
        __Marshaller_containerd_services_tasks_v1_ListPidsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Containerd.Services.Tasks.V1.CheckpointTaskRequest, global::Containerd.Services.Tasks.V1.CheckpointTaskResponse> __Method_Checkpoint = new grpc::Method<global::Containerd.Services.Tasks.V1.CheckpointTaskRequest, global::Containerd.Services.Tasks.V1.CheckpointTaskResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Checkpoint",
        __Marshaller_containerd_services_tasks_v1_CheckpointTaskRequest,
        __Marshaller_containerd_services_tasks_v1_CheckpointTaskResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Containerd.Services.Tasks.V1.UpdateTaskRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_Update = new grpc::Method<global::Containerd.Services.Tasks.V1.UpdateTaskRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Update",
        __Marshaller_containerd_services_tasks_v1_UpdateTaskRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Containerd.Services.Tasks.V1.MetricsRequest, global::Containerd.Services.Tasks.V1.MetricsResponse> __Method_Metrics = new grpc::Method<global::Containerd.Services.Tasks.V1.MetricsRequest, global::Containerd.Services.Tasks.V1.MetricsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Metrics",
        __Marshaller_containerd_services_tasks_v1_MetricsRequest,
        __Marshaller_containerd_services_tasks_v1_MetricsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Containerd.Services.Tasks.V1.WaitRequest, global::Containerd.Services.Tasks.V1.WaitResponse> __Method_Wait = new grpc::Method<global::Containerd.Services.Tasks.V1.WaitRequest, global::Containerd.Services.Tasks.V1.WaitResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Wait",
        __Marshaller_containerd_services_tasks_v1_WaitRequest,
        __Marshaller_containerd_services_tasks_v1_WaitResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Containerd.Services.Tasks.V1.TasksReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Tasks</summary>
    [grpc::BindServiceMethod(typeof(Tasks), "BindService")]
    public abstract partial class TasksBase
    {
      /// <summary>
      /// Create a task.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Containerd.Services.Tasks.V1.CreateTaskResponse> Create(global::Containerd.Services.Tasks.V1.CreateTaskRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Start a process.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Containerd.Services.Tasks.V1.StartResponse> Start(global::Containerd.Services.Tasks.V1.StartRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Delete a task and on disk state.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Containerd.Services.Tasks.V1.DeleteResponse> Delete(global::Containerd.Services.Tasks.V1.DeleteTaskRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Containerd.Services.Tasks.V1.DeleteResponse> DeleteProcess(global::Containerd.Services.Tasks.V1.DeleteProcessRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Containerd.Services.Tasks.V1.GetResponse> Get(global::Containerd.Services.Tasks.V1.GetRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Containerd.Services.Tasks.V1.ListTasksResponse> List(global::Containerd.Services.Tasks.V1.ListTasksRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// Kill a task or process.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> Kill(global::Containerd.Services.Tasks.V1.KillRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> Exec(global::Containerd.Services.Tasks.V1.ExecProcessRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> ResizePty(global::Containerd.Services.Tasks.V1.ResizePtyRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> CloseIO(global::Containerd.Services.Tasks.V1.CloseIORequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> Pause(global::Containerd.Services.Tasks.V1.PauseTaskRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> Resume(global::Containerd.Services.Tasks.V1.ResumeTaskRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Containerd.Services.Tasks.V1.ListPidsResponse> ListPids(global::Containerd.Services.Tasks.V1.ListPidsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Containerd.Services.Tasks.V1.CheckpointTaskResponse> Checkpoint(global::Containerd.Services.Tasks.V1.CheckpointTaskRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> Update(global::Containerd.Services.Tasks.V1.UpdateTaskRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Containerd.Services.Tasks.V1.MetricsResponse> Metrics(global::Containerd.Services.Tasks.V1.MetricsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Containerd.Services.Tasks.V1.WaitResponse> Wait(global::Containerd.Services.Tasks.V1.WaitRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for Tasks</summary>
    public partial class TasksClient : grpc::ClientBase<TasksClient>
    {
      /// <summary>Creates a new client for Tasks</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public TasksClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for Tasks that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public TasksClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected TasksClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected TasksClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// Create a task.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Containerd.Services.Tasks.V1.CreateTaskResponse Create(global::Containerd.Services.Tasks.V1.CreateTaskRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Create(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a task.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Containerd.Services.Tasks.V1.CreateTaskResponse Create(global::Containerd.Services.Tasks.V1.CreateTaskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Create, null, options, request);
      }
      /// <summary>
      /// Create a task.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Containerd.Services.Tasks.V1.CreateTaskResponse> CreateAsync(global::Containerd.Services.Tasks.V1.CreateTaskRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Create a task.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Containerd.Services.Tasks.V1.CreateTaskResponse> CreateAsync(global::Containerd.Services.Tasks.V1.CreateTaskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Create, null, options, request);
      }
      /// <summary>
      /// Start a process.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Containerd.Services.Tasks.V1.StartResponse Start(global::Containerd.Services.Tasks.V1.StartRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Start(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Start a process.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Containerd.Services.Tasks.V1.StartResponse Start(global::Containerd.Services.Tasks.V1.StartRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Start, null, options, request);
      }
      /// <summary>
      /// Start a process.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Containerd.Services.Tasks.V1.StartResponse> StartAsync(global::Containerd.Services.Tasks.V1.StartRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StartAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Start a process.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Containerd.Services.Tasks.V1.StartResponse> StartAsync(global::Containerd.Services.Tasks.V1.StartRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Start, null, options, request);
      }
      /// <summary>
      /// Delete a task and on disk state.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Containerd.Services.Tasks.V1.DeleteResponse Delete(global::Containerd.Services.Tasks.V1.DeleteTaskRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Delete(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a task and on disk state.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Containerd.Services.Tasks.V1.DeleteResponse Delete(global::Containerd.Services.Tasks.V1.DeleteTaskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Delete, null, options, request);
      }
      /// <summary>
      /// Delete a task and on disk state.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Containerd.Services.Tasks.V1.DeleteResponse> DeleteAsync(global::Containerd.Services.Tasks.V1.DeleteTaskRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Delete a task and on disk state.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Containerd.Services.Tasks.V1.DeleteResponse> DeleteAsync(global::Containerd.Services.Tasks.V1.DeleteTaskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Delete, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Containerd.Services.Tasks.V1.DeleteResponse DeleteProcess(global::Containerd.Services.Tasks.V1.DeleteProcessRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteProcess(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Containerd.Services.Tasks.V1.DeleteResponse DeleteProcess(global::Containerd.Services.Tasks.V1.DeleteProcessRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteProcess, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Containerd.Services.Tasks.V1.DeleteResponse> DeleteProcessAsync(global::Containerd.Services.Tasks.V1.DeleteProcessRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteProcessAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Containerd.Services.Tasks.V1.DeleteResponse> DeleteProcessAsync(global::Containerd.Services.Tasks.V1.DeleteProcessRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteProcess, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Containerd.Services.Tasks.V1.GetResponse Get(global::Containerd.Services.Tasks.V1.GetRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Get(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Containerd.Services.Tasks.V1.GetResponse Get(global::Containerd.Services.Tasks.V1.GetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Get, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Containerd.Services.Tasks.V1.GetResponse> GetAsync(global::Containerd.Services.Tasks.V1.GetRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Containerd.Services.Tasks.V1.GetResponse> GetAsync(global::Containerd.Services.Tasks.V1.GetRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Get, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Containerd.Services.Tasks.V1.ListTasksResponse List(global::Containerd.Services.Tasks.V1.ListTasksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return List(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Containerd.Services.Tasks.V1.ListTasksResponse List(global::Containerd.Services.Tasks.V1.ListTasksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_List, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Containerd.Services.Tasks.V1.ListTasksResponse> ListAsync(global::Containerd.Services.Tasks.V1.ListTasksRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Containerd.Services.Tasks.V1.ListTasksResponse> ListAsync(global::Containerd.Services.Tasks.V1.ListTasksRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_List, null, options, request);
      }
      /// <summary>
      /// Kill a task or process.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty Kill(global::Containerd.Services.Tasks.V1.KillRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Kill(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Kill a task or process.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty Kill(global::Containerd.Services.Tasks.V1.KillRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Kill, null, options, request);
      }
      /// <summary>
      /// Kill a task or process.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> KillAsync(global::Containerd.Services.Tasks.V1.KillRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return KillAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Kill a task or process.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> KillAsync(global::Containerd.Services.Tasks.V1.KillRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Kill, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty Exec(global::Containerd.Services.Tasks.V1.ExecProcessRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Exec(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty Exec(global::Containerd.Services.Tasks.V1.ExecProcessRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Exec, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> ExecAsync(global::Containerd.Services.Tasks.V1.ExecProcessRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ExecAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> ExecAsync(global::Containerd.Services.Tasks.V1.ExecProcessRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Exec, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty ResizePty(global::Containerd.Services.Tasks.V1.ResizePtyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ResizePty(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty ResizePty(global::Containerd.Services.Tasks.V1.ResizePtyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ResizePty, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> ResizePtyAsync(global::Containerd.Services.Tasks.V1.ResizePtyRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ResizePtyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> ResizePtyAsync(global::Containerd.Services.Tasks.V1.ResizePtyRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ResizePty, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty CloseIO(global::Containerd.Services.Tasks.V1.CloseIORequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CloseIO(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty CloseIO(global::Containerd.Services.Tasks.V1.CloseIORequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CloseIO, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> CloseIOAsync(global::Containerd.Services.Tasks.V1.CloseIORequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CloseIOAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> CloseIOAsync(global::Containerd.Services.Tasks.V1.CloseIORequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CloseIO, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty Pause(global::Containerd.Services.Tasks.V1.PauseTaskRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Pause(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty Pause(global::Containerd.Services.Tasks.V1.PauseTaskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Pause, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> PauseAsync(global::Containerd.Services.Tasks.V1.PauseTaskRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PauseAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> PauseAsync(global::Containerd.Services.Tasks.V1.PauseTaskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Pause, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty Resume(global::Containerd.Services.Tasks.V1.ResumeTaskRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Resume(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty Resume(global::Containerd.Services.Tasks.V1.ResumeTaskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Resume, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> ResumeAsync(global::Containerd.Services.Tasks.V1.ResumeTaskRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ResumeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> ResumeAsync(global::Containerd.Services.Tasks.V1.ResumeTaskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Resume, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Containerd.Services.Tasks.V1.ListPidsResponse ListPids(global::Containerd.Services.Tasks.V1.ListPidsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListPids(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Containerd.Services.Tasks.V1.ListPidsResponse ListPids(global::Containerd.Services.Tasks.V1.ListPidsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ListPids, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Containerd.Services.Tasks.V1.ListPidsResponse> ListPidsAsync(global::Containerd.Services.Tasks.V1.ListPidsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ListPidsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Containerd.Services.Tasks.V1.ListPidsResponse> ListPidsAsync(global::Containerd.Services.Tasks.V1.ListPidsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ListPids, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Containerd.Services.Tasks.V1.CheckpointTaskResponse Checkpoint(global::Containerd.Services.Tasks.V1.CheckpointTaskRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Checkpoint(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Containerd.Services.Tasks.V1.CheckpointTaskResponse Checkpoint(global::Containerd.Services.Tasks.V1.CheckpointTaskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Checkpoint, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Containerd.Services.Tasks.V1.CheckpointTaskResponse> CheckpointAsync(global::Containerd.Services.Tasks.V1.CheckpointTaskRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CheckpointAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Containerd.Services.Tasks.V1.CheckpointTaskResponse> CheckpointAsync(global::Containerd.Services.Tasks.V1.CheckpointTaskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Checkpoint, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty Update(global::Containerd.Services.Tasks.V1.UpdateTaskRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Update(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty Update(global::Containerd.Services.Tasks.V1.UpdateTaskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Update, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> UpdateAsync(global::Containerd.Services.Tasks.V1.UpdateTaskRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> UpdateAsync(global::Containerd.Services.Tasks.V1.UpdateTaskRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Update, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Containerd.Services.Tasks.V1.MetricsResponse Metrics(global::Containerd.Services.Tasks.V1.MetricsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Metrics(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Containerd.Services.Tasks.V1.MetricsResponse Metrics(global::Containerd.Services.Tasks.V1.MetricsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Metrics, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Containerd.Services.Tasks.V1.MetricsResponse> MetricsAsync(global::Containerd.Services.Tasks.V1.MetricsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return MetricsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Containerd.Services.Tasks.V1.MetricsResponse> MetricsAsync(global::Containerd.Services.Tasks.V1.MetricsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Metrics, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Containerd.Services.Tasks.V1.WaitResponse Wait(global::Containerd.Services.Tasks.V1.WaitRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Wait(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Containerd.Services.Tasks.V1.WaitResponse Wait(global::Containerd.Services.Tasks.V1.WaitRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Wait, null, options, request);
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Containerd.Services.Tasks.V1.WaitResponse> WaitAsync(global::Containerd.Services.Tasks.V1.WaitRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return WaitAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Containerd.Services.Tasks.V1.WaitResponse> WaitAsync(global::Containerd.Services.Tasks.V1.WaitRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Wait, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override TasksClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new TasksClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(TasksBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Create, serviceImpl.Create)
          .AddMethod(__Method_Start, serviceImpl.Start)
          .AddMethod(__Method_Delete, serviceImpl.Delete)
          .AddMethod(__Method_DeleteProcess, serviceImpl.DeleteProcess)
          .AddMethod(__Method_Get, serviceImpl.Get)
          .AddMethod(__Method_List, serviceImpl.List)
          .AddMethod(__Method_Kill, serviceImpl.Kill)
          .AddMethod(__Method_Exec, serviceImpl.Exec)
          .AddMethod(__Method_ResizePty, serviceImpl.ResizePty)
          .AddMethod(__Method_CloseIO, serviceImpl.CloseIO)
          .AddMethod(__Method_Pause, serviceImpl.Pause)
          .AddMethod(__Method_Resume, serviceImpl.Resume)
          .AddMethod(__Method_ListPids, serviceImpl.ListPids)
          .AddMethod(__Method_Checkpoint, serviceImpl.Checkpoint)
          .AddMethod(__Method_Update, serviceImpl.Update)
          .AddMethod(__Method_Metrics, serviceImpl.Metrics)
          .AddMethod(__Method_Wait, serviceImpl.Wait).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, TasksBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Create, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Containerd.Services.Tasks.V1.CreateTaskRequest, global::Containerd.Services.Tasks.V1.CreateTaskResponse>(serviceImpl.Create));
      serviceBinder.AddMethod(__Method_Start, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Containerd.Services.Tasks.V1.StartRequest, global::Containerd.Services.Tasks.V1.StartResponse>(serviceImpl.Start));
      serviceBinder.AddMethod(__Method_Delete, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Containerd.Services.Tasks.V1.DeleteTaskRequest, global::Containerd.Services.Tasks.V1.DeleteResponse>(serviceImpl.Delete));
      serviceBinder.AddMethod(__Method_DeleteProcess, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Containerd.Services.Tasks.V1.DeleteProcessRequest, global::Containerd.Services.Tasks.V1.DeleteResponse>(serviceImpl.DeleteProcess));
      serviceBinder.AddMethod(__Method_Get, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Containerd.Services.Tasks.V1.GetRequest, global::Containerd.Services.Tasks.V1.GetResponse>(serviceImpl.Get));
      serviceBinder.AddMethod(__Method_List, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Containerd.Services.Tasks.V1.ListTasksRequest, global::Containerd.Services.Tasks.V1.ListTasksResponse>(serviceImpl.List));
      serviceBinder.AddMethod(__Method_Kill, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Containerd.Services.Tasks.V1.KillRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.Kill));
      serviceBinder.AddMethod(__Method_Exec, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Containerd.Services.Tasks.V1.ExecProcessRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.Exec));
      serviceBinder.AddMethod(__Method_ResizePty, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Containerd.Services.Tasks.V1.ResizePtyRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.ResizePty));
      serviceBinder.AddMethod(__Method_CloseIO, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Containerd.Services.Tasks.V1.CloseIORequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.CloseIO));
      serviceBinder.AddMethod(__Method_Pause, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Containerd.Services.Tasks.V1.PauseTaskRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.Pause));
      serviceBinder.AddMethod(__Method_Resume, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Containerd.Services.Tasks.V1.ResumeTaskRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.Resume));
      serviceBinder.AddMethod(__Method_ListPids, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Containerd.Services.Tasks.V1.ListPidsRequest, global::Containerd.Services.Tasks.V1.ListPidsResponse>(serviceImpl.ListPids));
      serviceBinder.AddMethod(__Method_Checkpoint, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Containerd.Services.Tasks.V1.CheckpointTaskRequest, global::Containerd.Services.Tasks.V1.CheckpointTaskResponse>(serviceImpl.Checkpoint));
      serviceBinder.AddMethod(__Method_Update, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Containerd.Services.Tasks.V1.UpdateTaskRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.Update));
      serviceBinder.AddMethod(__Method_Metrics, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Containerd.Services.Tasks.V1.MetricsRequest, global::Containerd.Services.Tasks.V1.MetricsResponse>(serviceImpl.Metrics));
      serviceBinder.AddMethod(__Method_Wait, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Containerd.Services.Tasks.V1.WaitRequest, global::Containerd.Services.Tasks.V1.WaitResponse>(serviceImpl.Wait));
    }

  }
}
#endregion
